{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index A Python library of interactive CLI elements you have been looking for Acknowledgment BeauPy stands on the shoulders of giants. It is based on another library with which it shares some of the source code, cutie , developed by Kamik423 . It has begun as a fork but has since diverged into it's own thing and as such, detached from the original repository. Overview BeauPy implements a number of common interactive elements: Function Functionality select Prompt to pick a choice from a list select_multiple Prompt to select one or multiple choices from a list confirm Prompt with a question and yes/no options prompt Prompt that takes free input with optional validation, type conversion and input hiding Getting Started BeauPy is a library of interactive TUI elements for CLI applications. BeauPy is rich friendly stylable opinionated configurable Installation From PyPI: pip install beaupy From source: git clone https://github.com/petereon/beaupy.git poetry build pip install ./dist/beaupy- {{ some-version }} -py3-none-any.whl Example TUI elements shown in the above gif are the result of the follwing code: import beaupy def main (): \"\"\"Main.\"\"\" if beaupy . confirm ( \"Are you brave enough to continue?\" ): names = [ \"Arthur, King of the Britons\" , \"Sir Lancelot the Brave\" , \"Sir Robin the Not-Quite-So-Brave-as-Sir-Lancelot\" , \"Sir Bedevere the Wise\" , \"Sir Galahad the Pure\" , ] name = beaupy . select ( names , cursor_index = 3 , cursor = \"\ud83c\udff0\" ) print ( f \"Welcome, { name } \" ) # Get an integer greater or equal to 0 age = beaupy . prompt ( \"What is your age?\" , target_type = int , validator = lambda val : val > 0 ) nemeses_options = [ \"The French\" , \"The Police\" , \"The Knights Who Say Ni\" , \"Women\" , \"The Black Knight\" , \"The Bridge Keeper\" , \"The Rabbit of Caerbannog\" , ] print ( \"Choose your nemeses\" ) # Choose multiple options from a list nemeses = beaupy . select_multiple ( nemeses_options ) # Get input without showing it being typed quest = beaupy . prompt ( \"What is your quest?\" , secure = True ) print ( f \" { name } 's quest (who is { age } ) is { quest } .\" ) if nemeses : if len ( nemeses ) == 1 : print ( f \"His nemesis is { nemeses [ 0 ] } .\" ) else : print ( f 'His nemeses are { \" and \" . join ( nemeses ) } .' ) else : print ( \"He has no nemesis.\" ) Roadmap This repository has a associated GitHub project where work that is currently done can be seen Contributing If you want to contribute, please feel free to suggest features or implement them yourself. Also please report any issues and bugs you might find! Development To start development you can clone the repository: git clone https://github.com/petereon/beaupy.git Change the directory to the project directory: cd ./beaupy/ This project uses poetry as a dependency manager. You can install the dependencies using: poetry install For testing, this project relies on ward . It is included as a development dependency, so after installing the dependencies you can simply execute the following: poetry run poe test After you have made your changes, create a pull request towards a master branch of this repository Looking forward to your pull requests! License The project is licensed under the MIT License .","title":"Index"},{"location":"#index","text":"A Python library of interactive CLI elements you have been looking for","title":"Index"},{"location":"#acknowledgment","text":"BeauPy stands on the shoulders of giants. It is based on another library with which it shares some of the source code, cutie , developed by Kamik423 . It has begun as a fork but has since diverged into it's own thing and as such, detached from the original repository.","title":"Acknowledgment"},{"location":"#overview","text":"BeauPy implements a number of common interactive elements: Function Functionality select Prompt to pick a choice from a list select_multiple Prompt to select one or multiple choices from a list confirm Prompt with a question and yes/no options prompt Prompt that takes free input with optional validation, type conversion and input hiding","title":"Overview"},{"location":"#getting-started","text":"BeauPy is a library of interactive TUI elements for CLI applications. BeauPy is rich friendly stylable opinionated configurable","title":"Getting Started"},{"location":"#installation","text":"From PyPI: pip install beaupy From source: git clone https://github.com/petereon/beaupy.git poetry build pip install ./dist/beaupy- {{ some-version }} -py3-none-any.whl","title":"Installation"},{"location":"#example","text":"TUI elements shown in the above gif are the result of the follwing code: import beaupy def main (): \"\"\"Main.\"\"\" if beaupy . confirm ( \"Are you brave enough to continue?\" ): names = [ \"Arthur, King of the Britons\" , \"Sir Lancelot the Brave\" , \"Sir Robin the Not-Quite-So-Brave-as-Sir-Lancelot\" , \"Sir Bedevere the Wise\" , \"Sir Galahad the Pure\" , ] name = beaupy . select ( names , cursor_index = 3 , cursor = \"\ud83c\udff0\" ) print ( f \"Welcome, { name } \" ) # Get an integer greater or equal to 0 age = beaupy . prompt ( \"What is your age?\" , target_type = int , validator = lambda val : val > 0 ) nemeses_options = [ \"The French\" , \"The Police\" , \"The Knights Who Say Ni\" , \"Women\" , \"The Black Knight\" , \"The Bridge Keeper\" , \"The Rabbit of Caerbannog\" , ] print ( \"Choose your nemeses\" ) # Choose multiple options from a list nemeses = beaupy . select_multiple ( nemeses_options ) # Get input without showing it being typed quest = beaupy . prompt ( \"What is your quest?\" , secure = True ) print ( f \" { name } 's quest (who is { age } ) is { quest } .\" ) if nemeses : if len ( nemeses ) == 1 : print ( f \"His nemesis is { nemeses [ 0 ] } .\" ) else : print ( f 'His nemeses are { \" and \" . join ( nemeses ) } .' ) else : print ( \"He has no nemesis.\" )","title":"Example"},{"location":"#roadmap","text":"This repository has a associated GitHub project where work that is currently done can be seen","title":"Roadmap"},{"location":"#contributing","text":"If you want to contribute, please feel free to suggest features or implement them yourself. Also please report any issues and bugs you might find!","title":"Contributing"},{"location":"#development","text":"To start development you can clone the repository: git clone https://github.com/petereon/beaupy.git Change the directory to the project directory: cd ./beaupy/ This project uses poetry as a dependency manager. You can install the dependencies using: poetry install For testing, this project relies on ward . It is included as a development dependency, so after installing the dependencies you can simply execute the following: poetry run poe test After you have made your changes, create a pull request towards a master branch of this repository Looking forward to your pull requests!","title":"Development"},{"location":"#license","text":"The project is licensed under the MIT License .","title":"License"},{"location":"api/","text":"API Documentation A Python library of interactive CLI elements you have been looking for Class DefaultKeys class DefaultKeys () [view_source] A map of default keybindings. Attributes : interrupt(List[str]) - Keys that cause a keyboard interrupt. select(List[str]) - Keys that trigger list element selection. confirm(List[str]) - Keys that trigger list confirmation. delete(List[str]) - Keys that trigger character deletion. down(List[str]) - Keys that select the element below. up(List[str]) - Keys that select the element above. Class Config class Config () [view_source] A map of default configuration Attributes : raise_on_interrupt(bool) - If True, functions will raise KeyboardInterrupt whenever one is encountered when waiting for input, otherwise, they will return some sane alternative to their usual return (e.g.: None, [] ). Defaults to False. prompt def prompt ( prompt : str , target_type : Type = str , validator : Callable [[ Any ], bool ] = lambda input : True , secure : bool = False ) -> Any [view_source] Function that prompts the user for written input Arguments : prompt str - The prompt that will be displayed target_type Union[Type[T], Type[str]], optional - Type to convert the answer to. Defaults to str. validator Callable[[Any], bool], optional - Optional function to validate the input. Defaults to lambdainput:True. secure bool, optional - If True, input will be hidden. Defaults to False. Raises : ValidationError - Raised if validation with provided validator fails ConversionError - Raised if the value cannot be converted to provided type KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Union[T, str]: Returns a value formatted as provided type or string if no type is provided select def select ( options : List [ str ], cursor : str = \">\" , cursor_style : str = \"pink1\" , cursor_index : int = 0 , return_index : bool = False , strict : bool = False ) -> Union [ int , str , None ] [view_source] A prompt that allows selecting one option from a list of options Arguments : options List[str] - A list of options to select from cursor str, optional - Cursor that is going to appear in front of currently selected option. Defaults to '> '. cursor_style str, optional - Rich friendly style for the cursor. Defaults to 'pink1'. cursor_index int, optional - Option can be preselected based on its list index. Defaults to 0. return_index bool, optional - If True , select will return the index of selected element in options. Defaults to False . strict bool, optional - If empty options is provided and strict is False , None will be returned, if it's True , ValueError will be thrown. Defaults to False. Raises : ValueError - Thrown if no options are povided and strict is True KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Union[int, str, None]: Selected value or the index of a selected option or None select_multiple def select_multiple ( options : List [ str ], tick_character : str = \"\u2713\" , tick_style : str = \"pink1\" , cursor_style : str = \"pink1\" , ticked_indices : Optional [ List [ int ]] = None , cursor_index : int = 0 , minimal_count : int = 0 , maximal_count : Optional [ int ] = None , return_indices : bool = False , strict : bool = False ) -> Union [ List [ str ], List [ int ]] [view_source] A prompt that allows selecting multiple options from a list of options Arguments : options List[str] - A list of options to select from tick_character str, optional - Character that will be used as a tick in a checkbox. Defaults to 'x'. tick_style str, optional - Rich friendly style for the tick character. Defaults to 'pink1'. cursor_style str, optional - Rich friendly style for the option when the cursor is currently on it. Defaults to 'pink1'. ticked_indices Optional[List[int]], optional - Indices of options that are pre-ticked when the prompt appears. Defaults to None. cursor_index int, optional - Index of the option cursor starts at. Defaults to 0. minimal_count int, optional - Minimal count of options that need to be selected. Defaults to 0. maximal_count Optional[int], optional - Maximal count of options that need to be selected. Defaults to None. return_indices bool, optional - If True , select_multiple will return the indices of ticked elements in options. Defaults to False . strict bool, optional - If empty options is provided and strict is False , None will be returned, if it's True , ValueError will be thrown. Defaults to False. Raises : KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Union[List[str], List[int]]: A list of selected values or indices of selected options confirm def confirm ( question : str , yes_text : str = \"Yes\" , no_text : str = \"No\" , has_to_match_case : bool = False , enter_empty_confirms : bool = True , default_is_yes : bool = False , cursor : str = \"> \" , cursor_style : str = \"pink1\" , char_prompt : bool = True ) -> Optional [ bool ] [view_source] A prompt that asks a question and offers two responses Arguments : question str - Question to be asked yes_text str, optional - Text of the positive response. Defaults to 'Yes'. no_text str, optional - Text of the negative response. Defaults to 'No'. has_to_match_case bool, optional - Check if typed response matches case. Defaults to False. enter_empty_confirms bool, optional - No response is confirmation. Defaults to True. default_is_yes bool, optional - Default is Yes. Defaults to False. cursor str, optional - What character(s) to use as a cursor. Defaults to '> '. cursor_style str, optional - Rich friendly style for the cursor. Defaults to 'pink1'. char_prompt bool, optional - Print [Y/n] after the question. Defaults to True. Raises : KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Optional[bool]","title":"API Documentation"},{"location":"api/#api-documentation","text":"A Python library of interactive CLI elements you have been looking for","title":"API Documentation"},{"location":"api/#class-defaultkeys","text":"class DefaultKeys () [view_source] A map of default keybindings. Attributes : interrupt(List[str]) - Keys that cause a keyboard interrupt. select(List[str]) - Keys that trigger list element selection. confirm(List[str]) - Keys that trigger list confirmation. delete(List[str]) - Keys that trigger character deletion. down(List[str]) - Keys that select the element below. up(List[str]) - Keys that select the element above.","title":"Class DefaultKeys"},{"location":"api/#class-config","text":"class Config () [view_source] A map of default configuration Attributes : raise_on_interrupt(bool) - If True, functions will raise KeyboardInterrupt whenever one is encountered when waiting for input, otherwise, they will return some sane alternative to their usual return (e.g.: None, [] ). Defaults to False.","title":"Class Config"},{"location":"api/#prompt","text":"def prompt ( prompt : str , target_type : Type = str , validator : Callable [[ Any ], bool ] = lambda input : True , secure : bool = False ) -> Any [view_source] Function that prompts the user for written input Arguments : prompt str - The prompt that will be displayed target_type Union[Type[T], Type[str]], optional - Type to convert the answer to. Defaults to str. validator Callable[[Any], bool], optional - Optional function to validate the input. Defaults to lambdainput:True. secure bool, optional - If True, input will be hidden. Defaults to False. Raises : ValidationError - Raised if validation with provided validator fails ConversionError - Raised if the value cannot be converted to provided type KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Union[T, str]: Returns a value formatted as provided type or string if no type is provided","title":"prompt"},{"location":"api/#select","text":"def select ( options : List [ str ], cursor : str = \">\" , cursor_style : str = \"pink1\" , cursor_index : int = 0 , return_index : bool = False , strict : bool = False ) -> Union [ int , str , None ] [view_source] A prompt that allows selecting one option from a list of options Arguments : options List[str] - A list of options to select from cursor str, optional - Cursor that is going to appear in front of currently selected option. Defaults to '> '. cursor_style str, optional - Rich friendly style for the cursor. Defaults to 'pink1'. cursor_index int, optional - Option can be preselected based on its list index. Defaults to 0. return_index bool, optional - If True , select will return the index of selected element in options. Defaults to False . strict bool, optional - If empty options is provided and strict is False , None will be returned, if it's True , ValueError will be thrown. Defaults to False. Raises : ValueError - Thrown if no options are povided and strict is True KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Union[int, str, None]: Selected value or the index of a selected option or None","title":"select"},{"location":"api/#select_multiple","text":"def select_multiple ( options : List [ str ], tick_character : str = \"\u2713\" , tick_style : str = \"pink1\" , cursor_style : str = \"pink1\" , ticked_indices : Optional [ List [ int ]] = None , cursor_index : int = 0 , minimal_count : int = 0 , maximal_count : Optional [ int ] = None , return_indices : bool = False , strict : bool = False ) -> Union [ List [ str ], List [ int ]] [view_source] A prompt that allows selecting multiple options from a list of options Arguments : options List[str] - A list of options to select from tick_character str, optional - Character that will be used as a tick in a checkbox. Defaults to 'x'. tick_style str, optional - Rich friendly style for the tick character. Defaults to 'pink1'. cursor_style str, optional - Rich friendly style for the option when the cursor is currently on it. Defaults to 'pink1'. ticked_indices Optional[List[int]], optional - Indices of options that are pre-ticked when the prompt appears. Defaults to None. cursor_index int, optional - Index of the option cursor starts at. Defaults to 0. minimal_count int, optional - Minimal count of options that need to be selected. Defaults to 0. maximal_count Optional[int], optional - Maximal count of options that need to be selected. Defaults to None. return_indices bool, optional - If True , select_multiple will return the indices of ticked elements in options. Defaults to False . strict bool, optional - If empty options is provided and strict is False , None will be returned, if it's True , ValueError will be thrown. Defaults to False. Raises : KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Union[List[str], List[int]]: A list of selected values or indices of selected options","title":"select_multiple"},{"location":"api/#confirm","text":"def confirm ( question : str , yes_text : str = \"Yes\" , no_text : str = \"No\" , has_to_match_case : bool = False , enter_empty_confirms : bool = True , default_is_yes : bool = False , cursor : str = \"> \" , cursor_style : str = \"pink1\" , char_prompt : bool = True ) -> Optional [ bool ] [view_source] A prompt that asks a question and offers two responses Arguments : question str - Question to be asked yes_text str, optional - Text of the positive response. Defaults to 'Yes'. no_text str, optional - Text of the negative response. Defaults to 'No'. has_to_match_case bool, optional - Check if typed response matches case. Defaults to False. enter_empty_confirms bool, optional - No response is confirmation. Defaults to True. default_is_yes bool, optional - Default is Yes. Defaults to False. cursor str, optional - What character(s) to use as a cursor. Defaults to '> '. cursor_style str, optional - Rich friendly style for the cursor. Defaults to 'pink1'. char_prompt bool, optional - Print [Y/n] after the question. Defaults to True. Raises : KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Optional[bool]","title":"confirm"},{"location":"examples/","text":"More Examples select / select_multiple Functionality Return index Selective elements default to return the selected item (in case of select ) or list of items (in case of select_multiple ). This behavior can be modified by return_index parameter (or return_indices in case of the latter), see example, result_index = select ( option = [ 'select' , 'one' ], return_index = True ) Starting cursor index By default cursor is placed on the first element, this can be configured by cursor_index parameter as follows, results = select_multiple ([ 'options' , 'to' , 'select' , 'from' ], cursor_index = 2 ) Styling Tip For styling you can leverage numerous styling options provided by rich Style as text result = select ( options = [ \"red\" , \"on\" , \"white\" ], cursor = \"x\" , cursor_style = \"red on white\" ) Style as hex result_list = select_multiple ( options = [ \"ok\" , \"ko\" ], tick_character = \"k\" , tick_style = \"#af00ff) Cursor characters Emoji as a cursor Bug Some emojis can appear as one character instead of two! result = select ( options = [ \"here\" , \"comes\" , \"the\" , \"sun\" ], cursor = \"\ud83c\udf1e\" ) Non-ascii as a cursor result = select ( options = [ \"hardcore\" , \"unicode\" ], cursor = \"\u21c9\" ) Multi-character cursors/ticks Tip You can use multiple characters as a cursor result = select_multiple ( options = [ \"this\" , \"other thing\" ], tick_character = \"selected\" )","title":"More Examples"},{"location":"examples/#more-examples","text":"","title":"More Examples"},{"location":"examples/#selectselect_multiple","text":"","title":"select/select_multiple"},{"location":"examples/#functionality","text":"","title":"Functionality"},{"location":"examples/#return-index","text":"Selective elements default to return the selected item (in case of select ) or list of items (in case of select_multiple ). This behavior can be modified by return_index parameter (or return_indices in case of the latter), see example, result_index = select ( option = [ 'select' , 'one' ], return_index = True )","title":"Return index"},{"location":"examples/#starting-cursor-index","text":"By default cursor is placed on the first element, this can be configured by cursor_index parameter as follows, results = select_multiple ([ 'options' , 'to' , 'select' , 'from' ], cursor_index = 2 )","title":"Starting cursor index"},{"location":"examples/#styling","text":"Tip For styling you can leverage numerous styling options provided by rich","title":"Styling"},{"location":"examples/#style-as-text","text":"result = select ( options = [ \"red\" , \"on\" , \"white\" ], cursor = \"x\" , cursor_style = \"red on white\" )","title":"Style as text"},{"location":"examples/#style-as-hex","text":"result_list = select_multiple ( options = [ \"ok\" , \"ko\" ], tick_character = \"k\" , tick_style = \"#af00ff)","title":"Style as hex"},{"location":"examples/#cursor-characters","text":"","title":"Cursor characters"},{"location":"examples/#emoji-as-a-cursor","text":"Bug Some emojis can appear as one character instead of two! result = select ( options = [ \"here\" , \"comes\" , \"the\" , \"sun\" ], cursor = \"\ud83c\udf1e\" )","title":"Emoji as a cursor"},{"location":"examples/#non-ascii-as-a-cursor","text":"result = select ( options = [ \"hardcore\" , \"unicode\" ], cursor = \"\u21c9\" )","title":"Non-ascii as a cursor"},{"location":"examples/#multi-character-cursorsticks","text":"Tip You can use multiple characters as a cursor result = select_multiple ( options = [ \"this\" , \"other thing\" ], tick_character = \"selected\" )","title":"Multi-character cursors/ticks"}]}