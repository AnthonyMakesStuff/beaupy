{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index A Python library of interactive CLI elements you have been looking for For documentation but more and prettier see here Acknowledgment BeauPy stands on the shoulders of giants. It is based on another library with which it shares some of the source code, cutie , developed by Kamik423 . It has begun as a fork but has since diverged into it's own thing and as such, detached from the original repository. Overview BeauPy implements a number of common interactive elements: Function Functionality select Prompt to pick a choice from a list select_multiple Prompt to select one or multiple choices from a list confirm Prompt with a question and yes/no options prompt Prompt that takes free input with optional validation, type conversion and input hiding Getting Started BeauPy is a library of interactive TUI elements for CLI applications. BeauPy is rich friendly stylable opinionated configurable Installation From PyPI: pip install beaupy From source: git clone https://github.com/petereon/beaupy.git poetry build pip install ./dist/beaupy- {{ some-version }} -py3-none-any.whl Example TUI elements shown in the above gif are the result of the follwing code: import time from beaupy import * from beaupy.spinners import * def main (): \"\"\"Main.\"\"\" # Confirm a dialog if confirm ( \"Will you take the ring to Mordor?\" ): names = [ \"Frodo Baggins\" , \"Samwise Gamgee\" , \"Legolas\" , \"Aragorn\" , \"[red]Sauron[/red]\" , ] console . print ( \"Who are you?\" ) # Choose one item from a list name = select ( names , cursor = \"\ud83e\udca7\" , cursor_style = \"cyan\" ) console . print ( f \"Al\u00e1men\u00eb, { name } \" ) item_options = [ \"The One Ring\" , \"Dagger\" , \"Po-tae-toes\" , \"Lightsaber (Wrong franchise! Nevermind, roll with it!)\" , ] console . print ( \"What do you bring with you?\" ) # Choose multiple options from a list items = select_multiple ( item_options , tick_character = '\ud83c\udf92' , ticked_indices = [ 0 ], maximal_count = 3 ) potato_count = 0 if \"Po-tae-toes\" in items : # Prompt with type conversion and validation potato_count = prompt ( 'How many potatoes?' , target_type = int , validator = lambda count : count > 0 ) # Spinner to show while doing some work spinner = Spinner ( DOTS , \"Packing things...\" ) spinner . start () time . sleep ( 2 ) spinner . stop () # Get input without showing it being typed if \"friend\" == prompt ( \"Speak, [blue bold underline]friend[/blue bold underline], and enter\" , secure = True ) . lower (): # Custom spinner animation spinner_animation = [ '\u2589\u2589' , '\u258c\u2590' , ' ' , '\u258c\u2590' , '\u2589\u2589' ] spinner = Spinner ( spinner_animation , \"Opening the Door of Durin...\" ) spinner . start () time . sleep ( 2 ) spinner . stop () else : spinner_animation = [ '\ud83d\udc19\ud83c\udf0a \u2694\ufe0f ' , '\ud83d\udc19 \ud83c\udf0a \u2694\ufe0f ' , '\ud83d\udc19 \ud83c\udf0a \u2694\ufe0f ' , '\ud83d\udc19 \ud83c\udf0a \u2694\ufe0f ' , '\ud83d\udc19 \ud83c\udf0a\u2694\ufe0f ' ] spinner = Spinner ( spinner_animation , \"Getting attacked by an octopus...\" ) spinner . start () time . sleep ( 2 ) spinner . stop () if 'The One Ring' in items : console . print ( \"[green]You throw The One Ring to a lava from an eagle![/green]\" ) else : console . print ( \"[red]You forgot the right and brought Middle-Earth to its knees![/red]\" ) console . print ( f \"And you brought { potato_count } taters!\" ) For more information refer to more_examples or definitive, but much less exciting api documentation Roadmap This repository has a associated GitHub project where work that is currently done can be seen Contributing If you want to contribute, please feel free to suggest features or implement them yourself. Also please report any issues and bugs you might find! Development To start development you can clone the repository: git clone https://github.com/petereon/beaupy.git Change the directory to the project directory: cd ./beaupy/ This project uses poetry as a dependency manager. You can install the dependencies using: poetry install For testing, this project relies on ward . It is included as a development dependency, so after installing the dependencies you can simply execute the following: poetry run poe test Making sure the code follows quality standards and formatting can be ensured by executing poetry run poe lint You can also have the tests and lints run after every saved change by executing a respective watch command poetry run poe test:watch or poetry run poe lint:watch After you have made your changes, create a pull request towards a master branch of this repository Looking forward to your pull requests! Compatibility Internal logic of beaupy is supported for all the major platforms (Windows, Linux, macOS). For user input from console, beaupy relies on pallets/click , authors of which claim for it to be to be OS Independent on their PyPI page , and test against all the major platforms and Python versions For printing to console beaupy relies on Textualize/rich , which claims to support all the major platforms. Awesome projects using beaupy therealOri/PassGen : A strong password generator and built in password manager made with python3! License The project is licensed under the MIT License .","title":"Index"},{"location":"#index","text":"A Python library of interactive CLI elements you have been looking for For documentation but more and prettier see here","title":"Index"},{"location":"#acknowledgment","text":"BeauPy stands on the shoulders of giants. It is based on another library with which it shares some of the source code, cutie , developed by Kamik423 . It has begun as a fork but has since diverged into it's own thing and as such, detached from the original repository.","title":"Acknowledgment"},{"location":"#overview","text":"BeauPy implements a number of common interactive elements: Function Functionality select Prompt to pick a choice from a list select_multiple Prompt to select one or multiple choices from a list confirm Prompt with a question and yes/no options prompt Prompt that takes free input with optional validation, type conversion and input hiding","title":"Overview"},{"location":"#getting-started","text":"BeauPy is a library of interactive TUI elements for CLI applications. BeauPy is rich friendly stylable opinionated configurable","title":"Getting Started"},{"location":"#installation","text":"From PyPI: pip install beaupy From source: git clone https://github.com/petereon/beaupy.git poetry build pip install ./dist/beaupy- {{ some-version }} -py3-none-any.whl","title":"Installation"},{"location":"#example","text":"TUI elements shown in the above gif are the result of the follwing code: import time from beaupy import * from beaupy.spinners import * def main (): \"\"\"Main.\"\"\" # Confirm a dialog if confirm ( \"Will you take the ring to Mordor?\" ): names = [ \"Frodo Baggins\" , \"Samwise Gamgee\" , \"Legolas\" , \"Aragorn\" , \"[red]Sauron[/red]\" , ] console . print ( \"Who are you?\" ) # Choose one item from a list name = select ( names , cursor = \"\ud83e\udca7\" , cursor_style = \"cyan\" ) console . print ( f \"Al\u00e1men\u00eb, { name } \" ) item_options = [ \"The One Ring\" , \"Dagger\" , \"Po-tae-toes\" , \"Lightsaber (Wrong franchise! Nevermind, roll with it!)\" , ] console . print ( \"What do you bring with you?\" ) # Choose multiple options from a list items = select_multiple ( item_options , tick_character = '\ud83c\udf92' , ticked_indices = [ 0 ], maximal_count = 3 ) potato_count = 0 if \"Po-tae-toes\" in items : # Prompt with type conversion and validation potato_count = prompt ( 'How many potatoes?' , target_type = int , validator = lambda count : count > 0 ) # Spinner to show while doing some work spinner = Spinner ( DOTS , \"Packing things...\" ) spinner . start () time . sleep ( 2 ) spinner . stop () # Get input without showing it being typed if \"friend\" == prompt ( \"Speak, [blue bold underline]friend[/blue bold underline], and enter\" , secure = True ) . lower (): # Custom spinner animation spinner_animation = [ '\u2589\u2589' , '\u258c\u2590' , ' ' , '\u258c\u2590' , '\u2589\u2589' ] spinner = Spinner ( spinner_animation , \"Opening the Door of Durin...\" ) spinner . start () time . sleep ( 2 ) spinner . stop () else : spinner_animation = [ '\ud83d\udc19\ud83c\udf0a \u2694\ufe0f ' , '\ud83d\udc19 \ud83c\udf0a \u2694\ufe0f ' , '\ud83d\udc19 \ud83c\udf0a \u2694\ufe0f ' , '\ud83d\udc19 \ud83c\udf0a \u2694\ufe0f ' , '\ud83d\udc19 \ud83c\udf0a\u2694\ufe0f ' ] spinner = Spinner ( spinner_animation , \"Getting attacked by an octopus...\" ) spinner . start () time . sleep ( 2 ) spinner . stop () if 'The One Ring' in items : console . print ( \"[green]You throw The One Ring to a lava from an eagle![/green]\" ) else : console . print ( \"[red]You forgot the right and brought Middle-Earth to its knees![/red]\" ) console . print ( f \"And you brought { potato_count } taters!\" ) For more information refer to more_examples or definitive, but much less exciting api documentation","title":"Example"},{"location":"#roadmap","text":"This repository has a associated GitHub project where work that is currently done can be seen","title":"Roadmap"},{"location":"#contributing","text":"If you want to contribute, please feel free to suggest features or implement them yourself. Also please report any issues and bugs you might find!","title":"Contributing"},{"location":"#development","text":"To start development you can clone the repository: git clone https://github.com/petereon/beaupy.git Change the directory to the project directory: cd ./beaupy/ This project uses poetry as a dependency manager. You can install the dependencies using: poetry install For testing, this project relies on ward . It is included as a development dependency, so after installing the dependencies you can simply execute the following: poetry run poe test Making sure the code follows quality standards and formatting can be ensured by executing poetry run poe lint You can also have the tests and lints run after every saved change by executing a respective watch command poetry run poe test:watch or poetry run poe lint:watch After you have made your changes, create a pull request towards a master branch of this repository Looking forward to your pull requests!","title":"Development"},{"location":"#compatibility","text":"Internal logic of beaupy is supported for all the major platforms (Windows, Linux, macOS). For user input from console, beaupy relies on pallets/click , authors of which claim for it to be to be OS Independent on their PyPI page , and test against all the major platforms and Python versions For printing to console beaupy relies on Textualize/rich , which claims to support all the major platforms.","title":"Compatibility"},{"location":"#awesome-projects-using-beaupy","text":"therealOri/PassGen : A strong password generator and built in password manager made with python3!","title":"Awesome projects using beaupy"},{"location":"#license","text":"The project is licensed under the MIT License .","title":"License"},{"location":"api/","text":"API Documentation A Python library of interactive CLI elements you have been looking for Class DefaultKeys class DefaultKeys () [view_source] A map of default keybindings. Attributes : interrupt(List[str]) - Keys that cause a keyboard interrupt. select(List[str]) - Keys that trigger list element selection. confirm(List[str]) - Keys that trigger list confirmation. delete(List[str]) - Keys that trigger character deletion. down(List[str]) - Keys that select the element below. up(List[str]) - Keys that select the element above. Class Config class Config () [view_source] A map of default configuration Attributes : raise_on_interrupt(bool) - If True, functions will raise KeyboardInterrupt whenever one is encountered when waiting for input, otherwise, they will return some sane alternative to their usual return (e.g.: None, [] ). Defaults to False. prompt def prompt ( prompt : str , target_type : Type [ TargetType ] = str , validator : Callable [[ TargetType ], bool ] = lambda input : True , secure : bool = False , raise_validation_fail : bool = True , raise_type_conversion_fail : bool = True , initial_value : Optional [ str ] = None ) -> TargetType [view_source] Function that prompts the user for written input Arguments : prompt str - The prompt that will be displayed target_type Union[Type[T], Type[str]], optional - Type to convert the answer to. Defaults to str. validator Callable[[Any], bool], optional - Optional function to validate the input. Defaults to lambda input: True. secure bool, optional - If True, input will be hidden. Defaults to False. raise_validation_fail bool, optional - If True, invalid inputs will raise rich.internals.ValidationError , else the error will be reported onto the console. Defaults to True. raise_type_conversion_fail bool, optional - If True, invalid inputs will raise rich.internals.ConversionError , else the error will be reported onto the console. Defaults to True. initial_value str, optional - If present, the value is placed in the prompt as the default value. Raises : ValidationError - Raised if validation with provided validator fails ConversionError - Raised if the value cannot be converted to provided type KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Union[T, str]: Returns a value formatted as provided type or string if no type is provided select def select ( options : List [ Any ], preprocessor : Callable [[ Any ], Any ] = lambda val : val , cursor : str = '>' , cursor_style : str = 'pink1' , cursor_index : int = 0 , return_index : bool = False , strict : bool = False ) -> Union [ Selection , None ] [view_source] A prompt that allows selecting one option from a list of options Arguments : options List[Any] - A list of options to select from preprocessor Callable[[Any], Any] - A callable that can be used to preprocess the list of options prior to printing. For example, if you passed a Person object with name attribute, preprocessor could be lambda person: person.name to just show the content of name attribute in the select dialog. Defaults to lambda val: val cursor str, optional - Cursor that is going to appear in front of currently selected option. Defaults to '> '. cursor_style str, optional - Rich friendly style for the cursor. Defaults to 'pink1'. cursor_index int, optional - Option can be preselected based on its list index. Defaults to 0. return_index bool, optional - If True , select will return the index of selected element in options. Defaults to False . strict bool, optional - If empty options is provided and strict is False , None will be returned, if it's True , ValueError will be thrown. Defaults to False. Raises : ValueError - Thrown if no options are povided and strict is True KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Union[int, str, None]: Selected value or the index of a selected option or None select_multiple def select_multiple ( options : List [ Any ], preprocessor : Callable [[ Any ], Any ] = lambda val : val , tick_character : str = '\u2713' , tick_style : str = 'pink1' , cursor_style : str = 'pink1' , ticked_indices : Optional [ List [ int ]] = None , cursor_index : int = 0 , minimal_count : int = 0 , maximal_count : Optional [ int ] = None , return_indices : bool = False , strict : bool = False ) -> Selections [view_source] A prompt that allows selecting multiple options from a list of options Arguments : options List[Any] - A list of options to select from preprocessor Callable[[Any], Any] - A callable that can be used to preprocess the list of options prior to printing. For example, if you passed a Person object with name attribute, preprocessor could be lambda person: person.name to just show the content of name attribute in the select dialog. Defaults to lambda val: val tick_character str, optional - Character that will be used as a tick in a checkbox. Defaults to 'x'. tick_style str, optional - Rich friendly style for the tick character. Defaults to 'pink1'. cursor_style str, optional - Rich friendly style for the option when the cursor is currently on it. Defaults to 'pink1'. ticked_indices Optional[List[int]], optional - Indices of options that are pre-ticked when the prompt appears. Defaults to None. cursor_index int, optional - Index of the option cursor starts at. Defaults to 0. minimal_count int, optional - Minimal count of options that need to be selected. Defaults to 0. maximal_count Optional[int], optional - Maximal count of options that need to be selected. Defaults to None. return_indices bool, optional - If True , select_multiple will return the indices of ticked elements in options. Defaults to False . strict bool, optional - If empty options is provided and strict is False , None will be returned, if it's True , ValueError will be thrown. Defaults to False. Raises : KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Union[List[str], List[int]]: A list of selected values or indices of selected options confirm def confirm ( question : str , yes_text : str = 'Yes' , no_text : str = 'No' , has_to_match_case : bool = False , enter_empty_confirms : bool = True , default_is_yes : bool = False , cursor : str = '>' , cursor_style : str = 'pink1' , char_prompt : bool = True ) -> Optional [ bool ] [view_source] A prompt that asks a question and offers two responses Arguments : question str - Question to be asked yes_text str, optional - Text of the positive response. Defaults to 'Yes'. no_text str, optional - Text of the negative response. Defaults to 'No'. has_to_match_case bool, optional - Check if typed response matches case. Defaults to False. enter_empty_confirms bool, optional - No response is confirmation. Defaults to True. default_is_yes bool, optional - Default is Yes. Defaults to False. cursor str, optional - What character(s) to use as a cursor. Defaults to '> '. cursor_style str, optional - Rich friendly style for the cursor. Defaults to 'pink1'. char_prompt bool, optional - Print [Y/n] after the question. Defaults to True. Raises : KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Optional[bool] Class Spinner class Spinner () [view_source] __init__ def __init__ ( spinner_characters : List [ str ] = DOTS , text : str = 'Loading...' , refresh_per_second : float = 10 , transient : bool = True ) [view_source] Creates a spinner which can be used to provide some user feedback during long processing Arguments : spinner_characters List[str] - List of strings that will be displayed in sequence by a spinner text str - Static text that will be shown after the spinner. Defaults to Loading... refresh_per_second float, optional - Number of refreshes the spinner will do a second, this will affect the fluidity of the \"animation\". Defaults to 10. transient bool, optional - If the spinner will disappear after it's done, otherwise not. Defaults to True. Raises : ValueError - Raised when no spinner_characters are provided in start def start () -> None [view_source] Starts the spinner stop def stop () -> None [view_source] Stops the spinner","title":"API Documentation"},{"location":"api/#api-documentation","text":"A Python library of interactive CLI elements you have been looking for","title":"API Documentation"},{"location":"api/#class-defaultkeys","text":"class DefaultKeys () [view_source] A map of default keybindings. Attributes : interrupt(List[str]) - Keys that cause a keyboard interrupt. select(List[str]) - Keys that trigger list element selection. confirm(List[str]) - Keys that trigger list confirmation. delete(List[str]) - Keys that trigger character deletion. down(List[str]) - Keys that select the element below. up(List[str]) - Keys that select the element above.","title":"Class DefaultKeys"},{"location":"api/#class-config","text":"class Config () [view_source] A map of default configuration Attributes : raise_on_interrupt(bool) - If True, functions will raise KeyboardInterrupt whenever one is encountered when waiting for input, otherwise, they will return some sane alternative to their usual return (e.g.: None, [] ). Defaults to False.","title":"Class Config"},{"location":"api/#prompt","text":"def prompt ( prompt : str , target_type : Type [ TargetType ] = str , validator : Callable [[ TargetType ], bool ] = lambda input : True , secure : bool = False , raise_validation_fail : bool = True , raise_type_conversion_fail : bool = True , initial_value : Optional [ str ] = None ) -> TargetType [view_source] Function that prompts the user for written input Arguments : prompt str - The prompt that will be displayed target_type Union[Type[T], Type[str]], optional - Type to convert the answer to. Defaults to str. validator Callable[[Any], bool], optional - Optional function to validate the input. Defaults to lambda input: True. secure bool, optional - If True, input will be hidden. Defaults to False. raise_validation_fail bool, optional - If True, invalid inputs will raise rich.internals.ValidationError , else the error will be reported onto the console. Defaults to True. raise_type_conversion_fail bool, optional - If True, invalid inputs will raise rich.internals.ConversionError , else the error will be reported onto the console. Defaults to True. initial_value str, optional - If present, the value is placed in the prompt as the default value. Raises : ValidationError - Raised if validation with provided validator fails ConversionError - Raised if the value cannot be converted to provided type KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Union[T, str]: Returns a value formatted as provided type or string if no type is provided","title":"prompt"},{"location":"api/#select","text":"def select ( options : List [ Any ], preprocessor : Callable [[ Any ], Any ] = lambda val : val , cursor : str = '>' , cursor_style : str = 'pink1' , cursor_index : int = 0 , return_index : bool = False , strict : bool = False ) -> Union [ Selection , None ] [view_source] A prompt that allows selecting one option from a list of options Arguments : options List[Any] - A list of options to select from preprocessor Callable[[Any], Any] - A callable that can be used to preprocess the list of options prior to printing. For example, if you passed a Person object with name attribute, preprocessor could be lambda person: person.name to just show the content of name attribute in the select dialog. Defaults to lambda val: val cursor str, optional - Cursor that is going to appear in front of currently selected option. Defaults to '> '. cursor_style str, optional - Rich friendly style for the cursor. Defaults to 'pink1'. cursor_index int, optional - Option can be preselected based on its list index. Defaults to 0. return_index bool, optional - If True , select will return the index of selected element in options. Defaults to False . strict bool, optional - If empty options is provided and strict is False , None will be returned, if it's True , ValueError will be thrown. Defaults to False. Raises : ValueError - Thrown if no options are povided and strict is True KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Union[int, str, None]: Selected value or the index of a selected option or None","title":"select"},{"location":"api/#select_multiple","text":"def select_multiple ( options : List [ Any ], preprocessor : Callable [[ Any ], Any ] = lambda val : val , tick_character : str = '\u2713' , tick_style : str = 'pink1' , cursor_style : str = 'pink1' , ticked_indices : Optional [ List [ int ]] = None , cursor_index : int = 0 , minimal_count : int = 0 , maximal_count : Optional [ int ] = None , return_indices : bool = False , strict : bool = False ) -> Selections [view_source] A prompt that allows selecting multiple options from a list of options Arguments : options List[Any] - A list of options to select from preprocessor Callable[[Any], Any] - A callable that can be used to preprocess the list of options prior to printing. For example, if you passed a Person object with name attribute, preprocessor could be lambda person: person.name to just show the content of name attribute in the select dialog. Defaults to lambda val: val tick_character str, optional - Character that will be used as a tick in a checkbox. Defaults to 'x'. tick_style str, optional - Rich friendly style for the tick character. Defaults to 'pink1'. cursor_style str, optional - Rich friendly style for the option when the cursor is currently on it. Defaults to 'pink1'. ticked_indices Optional[List[int]], optional - Indices of options that are pre-ticked when the prompt appears. Defaults to None. cursor_index int, optional - Index of the option cursor starts at. Defaults to 0. minimal_count int, optional - Minimal count of options that need to be selected. Defaults to 0. maximal_count Optional[int], optional - Maximal count of options that need to be selected. Defaults to None. return_indices bool, optional - If True , select_multiple will return the indices of ticked elements in options. Defaults to False . strict bool, optional - If empty options is provided and strict is False , None will be returned, if it's True , ValueError will be thrown. Defaults to False. Raises : KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Union[List[str], List[int]]: A list of selected values or indices of selected options","title":"select_multiple"},{"location":"api/#confirm","text":"def confirm ( question : str , yes_text : str = 'Yes' , no_text : str = 'No' , has_to_match_case : bool = False , enter_empty_confirms : bool = True , default_is_yes : bool = False , cursor : str = '>' , cursor_style : str = 'pink1' , char_prompt : bool = True ) -> Optional [ bool ] [view_source] A prompt that asks a question and offers two responses Arguments : question str - Question to be asked yes_text str, optional - Text of the positive response. Defaults to 'Yes'. no_text str, optional - Text of the negative response. Defaults to 'No'. has_to_match_case bool, optional - Check if typed response matches case. Defaults to False. enter_empty_confirms bool, optional - No response is confirmation. Defaults to True. default_is_yes bool, optional - Default is Yes. Defaults to False. cursor str, optional - What character(s) to use as a cursor. Defaults to '> '. cursor_style str, optional - Rich friendly style for the cursor. Defaults to 'pink1'. char_prompt bool, optional - Print [Y/n] after the question. Defaults to True. Raises : KeyboardInterrupt - Raised when keyboard interrupt is encountered and Config.raise_on_interrupt is True Returns : Optional[bool]","title":"confirm"},{"location":"api/#class-spinner","text":"class Spinner () [view_source]","title":"Class Spinner"},{"location":"api/#__init__","text":"def __init__ ( spinner_characters : List [ str ] = DOTS , text : str = 'Loading...' , refresh_per_second : float = 10 , transient : bool = True ) [view_source] Creates a spinner which can be used to provide some user feedback during long processing Arguments : spinner_characters List[str] - List of strings that will be displayed in sequence by a spinner text str - Static text that will be shown after the spinner. Defaults to Loading... refresh_per_second float, optional - Number of refreshes the spinner will do a second, this will affect the fluidity of the \"animation\". Defaults to 10. transient bool, optional - If the spinner will disappear after it's done, otherwise not. Defaults to True. Raises : ValueError - Raised when no spinner_characters are provided in","title":"__init__"},{"location":"api/#start","text":"def start () -> None [view_source] Starts the spinner","title":"start"},{"location":"api/#stop","text":"def stop () -> None [view_source] Stops the spinner","title":"stop"},{"location":"examples/","text":"More Examples select / select_multiple Functionality Return index Selective elements default to return the selected item (in case of select ) or list of items (in case of select_multiple ). This behavior can be modified by return_index parameter (or return_indices in case of the latter), see example, result_index = select ( options = [ 'I \\' ll be returned as 0' , 'I \\' ll be returned as 1' ], return_index = True ) Starting cursor index By default cursor is placed on the first element, this can be configured by cursor_index parameter as follows, results = select ([ 'Not here either' , 'Not here' , 'Start from here' ], cursor_index = 1 ) Preticked indices for select_multiple You can have preticked options using ticked_indices in select_multiple : loved_children = select_multiple ([ 'Oldest child' , 'Middle child' , 'Youngest Child' ], ticked_indices = [ 0 , 2 ]) Maximal and minimal count for select_multiple With select_multiple you can restrict maximum and minimum count of elements using maximal_count and minimal_count respectively, pizza_toppings = select_mutliple ([ 'pineapple' , 'olives' , 'anchovies' , 'mozzarella' , 'parma ham' ] maximal_count = 3 , minimal_count = 1 ) Styling Tip For styling you can leverage numerous styling options provided by rich Style as text stylish = select ( options = [ \"red\" , \"on\" , \"white\" ], cursor = \"x\" , cursor_style = \"red on white\" ) Style as hex selections = select_multiple ( options = [ \"s\" , \"h\" , \"e\" , \"\" , \"b\" , \"e\" , \"l\" , \"i\" , \"e\" , \"v\" , \"e\" , \"d\" ], tick_style = \"#af00ff\" , ticked_indices = [ 1 , 2 , 6 , 7 , 8 , 11 ]) Cursor characters Emoji as a cursor Bug Some emojis can appear as one character instead of two! result = select ( options = [ \"here\" , \"comes\" , \"the\" , \"sun\" ], cursor = \"\ud83c\udf1e\" ) Non-ascii as a cursor result = select ( options = [ \"hardcore\" , \"unicode\" ], cursor = \"\u21c9\" ) Multi-character cursors/ticks Tip You can use multiple characters as a cursor correct_abba_lyric = select_multiple ( options = [ \"queen\" , \"bean\" ], tick_character = \"dancing\" ) prompt Functionality You can have a default prompt, which will collect the user typed response to the mood variable as string mood = prompt ( \"How are you today?\" ) Validation Additionally, you can validate the input using some sort of Callable validator , for example a lambda expression to make sure input is not numeric, answer = prompt ( prompt = \"What is the answer to life the universe and everything?\" validator = lambda val : not val . isnumeric ()) Type Conversion You might want to convert types for some sort of downstream functionality using target_type , Note Validation is always second to type conversion number_between_1_and_10 = prompt ( \"Give me a number between 1 and 10\" , target_type = int validator = lambda n : 0 < n <= 10 ) Hidden/secure input For sensitive input, secure flag can be utilized, replacing user entered input with * very_secret_info = prompt ( \"Type you API key, hehe\" , secure = True ) Spinners Styling Spinner Animation There are few built in spinner animations, namely: ARC, ARROWS, BARS, CLOCK, DIAMOND, DOT, DOTS, LINE, LOADING and MOON Each of these can be used in a spinner: from beaupy.spinners import Spinner , ARC spinner = Spinner ( ARC , \"Doing some heavy work\" ) spinner . start () All that \"animations\" are, is but a list of string, so making your own is as trivial as this: from beaupy.spinners import Spinner spinner = Spinner ([ 'whee' , 'whe ' , 'wh ' , 'w ' , 'wh ' , 'whe ' , 'whee' ], \"Whee!\" ) spinner . start () Rich styling Every text in spinner does accept and respect rich styles, so the following works: from beaupy.spinners import Spinner spinner = Spinner ([ '[red]\u2b24[/red] ' , '[green]\u2b24[/green] ' , '[blue]\u2b24[/blue] ' ], '[pink1]Setting[/pink1] colors!' ) spinner . start () Animation speed Animation speed can be set using refresh_per_second parameter: from beaupy.spinners import Spinner , LOADING spinner = Spinner ( LOADING , \"something\" , refresh_per_second = 4 ) spinner . start ()","title":"More Examples"},{"location":"examples/#more-examples","text":"","title":"More Examples"},{"location":"examples/#selectselect_multiple","text":"","title":"select/select_multiple"},{"location":"examples/#functionality","text":"","title":"Functionality"},{"location":"examples/#return-index","text":"Selective elements default to return the selected item (in case of select ) or list of items (in case of select_multiple ). This behavior can be modified by return_index parameter (or return_indices in case of the latter), see example, result_index = select ( options = [ 'I \\' ll be returned as 0' , 'I \\' ll be returned as 1' ], return_index = True )","title":"Return index"},{"location":"examples/#starting-cursor-index","text":"By default cursor is placed on the first element, this can be configured by cursor_index parameter as follows, results = select ([ 'Not here either' , 'Not here' , 'Start from here' ], cursor_index = 1 )","title":"Starting cursor index"},{"location":"examples/#preticked-indices-for-select_multiple","text":"You can have preticked options using ticked_indices in select_multiple : loved_children = select_multiple ([ 'Oldest child' , 'Middle child' , 'Youngest Child' ], ticked_indices = [ 0 , 2 ])","title":"Preticked indices for select_multiple"},{"location":"examples/#maximal-and-minimal-count-for-select_multiple","text":"With select_multiple you can restrict maximum and minimum count of elements using maximal_count and minimal_count respectively, pizza_toppings = select_mutliple ([ 'pineapple' , 'olives' , 'anchovies' , 'mozzarella' , 'parma ham' ] maximal_count = 3 , minimal_count = 1 )","title":"Maximal and minimal count for select_multiple"},{"location":"examples/#styling","text":"Tip For styling you can leverage numerous styling options provided by rich","title":"Styling"},{"location":"examples/#style-as-text","text":"stylish = select ( options = [ \"red\" , \"on\" , \"white\" ], cursor = \"x\" , cursor_style = \"red on white\" )","title":"Style as text"},{"location":"examples/#style-as-hex","text":"selections = select_multiple ( options = [ \"s\" , \"h\" , \"e\" , \"\" , \"b\" , \"e\" , \"l\" , \"i\" , \"e\" , \"v\" , \"e\" , \"d\" ], tick_style = \"#af00ff\" , ticked_indices = [ 1 , 2 , 6 , 7 , 8 , 11 ])","title":"Style as hex"},{"location":"examples/#cursor-characters","text":"","title":"Cursor characters"},{"location":"examples/#emoji-as-a-cursor","text":"Bug Some emojis can appear as one character instead of two! result = select ( options = [ \"here\" , \"comes\" , \"the\" , \"sun\" ], cursor = \"\ud83c\udf1e\" )","title":"Emoji as a cursor"},{"location":"examples/#non-ascii-as-a-cursor","text":"result = select ( options = [ \"hardcore\" , \"unicode\" ], cursor = \"\u21c9\" )","title":"Non-ascii as a cursor"},{"location":"examples/#multi-character-cursorsticks","text":"Tip You can use multiple characters as a cursor correct_abba_lyric = select_multiple ( options = [ \"queen\" , \"bean\" ], tick_character = \"dancing\" )","title":"Multi-character cursors/ticks"},{"location":"examples/#prompt","text":"","title":"prompt"},{"location":"examples/#functionality_1","text":"You can have a default prompt, which will collect the user typed response to the mood variable as string mood = prompt ( \"How are you today?\" )","title":"Functionality"},{"location":"examples/#validation","text":"Additionally, you can validate the input using some sort of Callable validator , for example a lambda expression to make sure input is not numeric, answer = prompt ( prompt = \"What is the answer to life the universe and everything?\" validator = lambda val : not val . isnumeric ())","title":"Validation"},{"location":"examples/#type-conversion","text":"You might want to convert types for some sort of downstream functionality using target_type , Note Validation is always second to type conversion number_between_1_and_10 = prompt ( \"Give me a number between 1 and 10\" , target_type = int validator = lambda n : 0 < n <= 10 )","title":"Type Conversion"},{"location":"examples/#hiddensecure-input","text":"For sensitive input, secure flag can be utilized, replacing user entered input with * very_secret_info = prompt ( \"Type you API key, hehe\" , secure = True )","title":"Hidden/secure input"},{"location":"examples/#spinners","text":"","title":"Spinners"},{"location":"examples/#styling_1","text":"","title":"Styling"},{"location":"examples/#spinner-animation","text":"There are few built in spinner animations, namely: ARC, ARROWS, BARS, CLOCK, DIAMOND, DOT, DOTS, LINE, LOADING and MOON Each of these can be used in a spinner: from beaupy.spinners import Spinner , ARC spinner = Spinner ( ARC , \"Doing some heavy work\" ) spinner . start () All that \"animations\" are, is but a list of string, so making your own is as trivial as this: from beaupy.spinners import Spinner spinner = Spinner ([ 'whee' , 'whe ' , 'wh ' , 'w ' , 'wh ' , 'whe ' , 'whee' ], \"Whee!\" ) spinner . start ()","title":"Spinner Animation"},{"location":"examples/#rich-styling","text":"Every text in spinner does accept and respect rich styles, so the following works: from beaupy.spinners import Spinner spinner = Spinner ([ '[red]\u2b24[/red] ' , '[green]\u2b24[/green] ' , '[blue]\u2b24[/blue] ' ], '[pink1]Setting[/pink1] colors!' ) spinner . start ()","title":"Rich styling"},{"location":"examples/#animation-speed","text":"Animation speed can be set using refresh_per_second parameter: from beaupy.spinners import Spinner , LOADING spinner = Spinner ( LOADING , \"something\" , refresh_per_second = 4 ) spinner . start ()","title":"Animation speed"}]}